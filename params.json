{"name":"Cutterjs","tagline":"Cut any element from web page","body":"## Setup\r\n```\r\n$ git clone git@github.com:likerRr/cutterjs.git\r\n```\r\n1. Download .zip or clone .git\r\n2. Extract or copy files to project scripts folder\r\n3. Include downloaded files and jQuery library in your project\r\n```\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\r\n<script src=\"cutter.min.js\">\r\n```\r\n\r\n## How to\r\nYou only need to initialize plugin with jQuery element, that wraps area where you want to cut:\r\n```\r\n$('body').cutter('init');\r\n```\r\nBy default, init method have some default options:\r\n\r\n1. Elements under cursor appear with border\r\n2. On cut action element will change it display style to `display: none`\r\n3. On restore action element returns inherit display property\r\n\r\n## Customizing\r\nYou can override almost all actions used in plugin just in `init` method with second parameter\r\n> All callback methods accept one parameter - element in action\r\n\r\n### mouseOver\r\nHandle, when mouse moves over element in target area:\r\n```\r\n$('body').cutter('init', {\r\n  mouseOver: function(el) {\r\n    el.data('border', el.css('border'));\r\n    el.css('border', 'dotted gray 1px');\r\n  },\r\n});\r\n```\r\nNow hovered elements will have dotted gray border\r\n> Please, note, you need to store default data with `data` method to be able to restore previous element state\r\n\r\n### mouseOut\r\nHandle, when mouse moves out from element in target area:\r\n```\r\n$('body').cutter('init', {\r\n  mouseOut: function(el) {\r\n    el.css('border', el.data('border'));\r\n  },\r\n});\r\n```\r\n> Now we can restore default value of `border` property\r\n\r\n### onCut\r\nYou can use that option to set up, how elements will be removed\r\n```\r\n$('body').cutter('init', {\r\n  onCut: function(el) {\r\n    el.data('opacity', el.css('opacity'));\r\n    el.css('opacity', '0.3');\r\n  },\r\n});\r\n```\r\n> Note! You need to store default element state to be able to restore it\r\n\r\n### afterCut\r\nYou may need to do list with deleted elements to be able to restore them, so that method will help you\r\n```\r\nvar deletedElements = [];\r\n...\r\n$('body').cutter('init', {\r\n   afterCut: function(el) {deletedElements .push(el);},\r\n});\r\n```\r\n\r\n### onRestore\r\nFunction will handle when you call `restore` method\r\n```\r\n$('body').cutter('init', {\r\n  onRestore: function(el) {\r\n    el.css('opacity', el.data('opacity'));\r\n  }\r\n});\r\n```\r\n\r\n## Methods\r\n\r\n### stop\r\nI think that \"cut mode\" will not be active all the time, so we need to be able to stop it\r\n```\r\nvar bodyArea = $('body').cutter('init');\r\n...\r\nbodyArea.cutter('stop');\r\n```\r\nAfter calling this method all actions will be suspended\r\n\r\n### start\r\nTo restore \"cut mode\" call `start` method\r\n```\r\nvar bodyArea = $('body').cutter('init');\r\n...\r\nbodyArea.cutter('stop');\r\n...\r\nbodyArea.cutter('start');\r\n```\r\n\r\n### deleted\r\nYou can also get all deleted items for current area, just use `deleted` method\r\n```\r\nvar bodyArea = $('body').cutter('init');\r\n...\r\nvar deletedItems = bodyArea.cutter('deleted');\r\n```\r\n\r\n### restore\r\nFinally you need to be able to restore deleted elements. Method `restore` will help you. It accepts one optional parameter - deleted jQuery element or empty to restore all elements\r\n```\r\nvar $lastDeleted;\r\n...\r\nvar bodyArea = $('body').cutter('init', {\r\n   afterCut: function(el) {$lastDeleted = el;},\r\n});\r\n// restore one\r\nbodyArea.cutter('restore', $lastDeleted);\r\n// restore all\r\nbodyArea.cutter('restore');\r\n```\r\n\r\n## Examples\r\nComing soon. Now you can try it yourself. Have fun!\r\n\r\n## Licence\r\nProject under MIT licence, feel free to use and edit\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}